#include <WiFi.h>
#include <time.h>
#include <esp_sntp.h>
#include <SPI.h>
#include <FastLED.h>
#include "WifiCredentials.h"
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <algorithm>
#include <ctype.h>
#include <string.h>

const long gmtOffset_sec = -8 * 3600;
const int daylightOffset_sec = 0;

#define DATA_PIN 11
#define CLK_PIN 13
#define CS_PIN 12
#define SPI_FREQ 8000000UL

#define MAX_BRIGHTNESS 0.05

#define RED_PIN 8
#define ORANGE_PIN 6
#define YELLOW_PIN 9
#define BLUE_PIN 7
#define GREEN_PIN 5
#define CAL_PIN 10
#define ACE_PIN 17
#define LEGEND_PIN 18

#define RED_LEN 30
#define ORANGE_LEN 27
#define YELLOW_LEN 34
#define BLUE_LEN 28
#define GREEN_LEN 34
#define CAL_LEN 30
#define ACE_LEN 37
#define LEGEND_LEN 7

#include <map>
#include <vector>

struct StopRecord;
struct Trip;
extern const uint8_t lineLens[];
extern CRGB *lineLeds[];

enum Line
{
  RED,
  ORANGE,
  YELLOW,
  GREEN,
  BLUE,
  CALTRAIN,
  ACE,
  NUM_LINES
};

std::vector<uint8_t> getLineIndices(enum Line line);

enum StationId
{
  VASCO_RD = 0,
  LIVERMORE,
  PLEASANTON,
  FREMONT,
  GREAT_AMERICA,
  SANTA_CLARA,
  ST_12TH_ST_OAKLAND_CITY_CENTER,
  ST_16TH_ST_MISSION,
  ST_19TH_ST_OAKLAND,
  ST_22ND_STREET,
  ST_24TH_ST_MISSION,
  ANTIOCH,
  ASHBY,
  BALBOA_PARK,
  BAY_FAIR,
  BAYSHORE,
  BELMONT,
  BERRYESSA_NORTH_SAN_JOSE,
  BROADWAY,
  BURLINGAME,
  CALIFORNIA_AVE,
  CASTRO_VALLEY,
  CIVIC_CENTER_UN_PLAZA,
  COLISEUM,
  COLLEGE_PARK,
  COLMA,
  CONCORD,
  DALY_CITY,
  DOWNTOWN_BERKELEY,
  DUBLIN_PLEASANTON,
  EL_CERRITO_DEL_NORTE,
  EL_CERRITO_PLAZA,
  EMBARCADERO,
  FRUITVALE,
  GLEN_PARK,
  HAYWARD,
  HAYWARD_PARK,
  HILLSDALE,
  LAFAYETTE,
  LAKE_MERRITT,
  LAWRENCE,
  MACARTHUR,
  MENLO_PARK,
  MILLBRAE,
  MILPITAS,
  MONTGOMERY_ST,
  MOUNTAIN_VIEW,
  NORTH_BERKELEY,
  NORTH_CONCORD_MARTINEZ,
  ORINDA,
  PALO_ALTO,
  PITTSBURG_BAY_POINT,
  PITTSBURG_CENTER,
  PLEASANT_HILL_CONTRA_COSTA_CENTRE,
  POWELL_ST,
  REDWOOD_CITY,
  RICHMOND,
  ROCKRIDGE,
  SAN_ANTONIO,
  SAN_BRUNO,
  SAN_CARLOS,
  SAN_FRANCISCO,
  SAN_FRANCISCO_INTERNATIONAL_AIRPORT,
  SAN_JOSE_DIRIDON,
  SAN_LEANDRO,
  SAN_MATEO,
  SOUTH_HAYWARD,
  SOUTH_SAN_FRANCISCO,
  STANFORD,
  SUNNYVALE,
  TAMIEN,
  UNION_CITY,
  WALNUT_CREEK,
  WARM_SPRINGS_SOUTH_FREMONT,
  WEST_DUBLIN_PLEASANTON,
  WEST_OAKLAND,
  NUM_STATIONS
};

StationId stationIdFromExternalId(const std::string &rawId)
{
  std::string id = rawId;
  std::transform(id.begin(), id.end(), id.begin(),
                 [](unsigned char c)
                 { return std::toupper(c); });

  if (id == "73368" || id == "902901" || id == "902902")
    return StationId::FREMONT;
  if (id == "73422")
    return StationId::GREAT_AMERICA;
  if (id == "73548")
    return StationId::LIVERMORE;
  if (id == "73757")
    return StationId::PLEASANTON;
  if (id == "73752" || id == "70261" || id == "70262")
    return StationId::SAN_JOSE_DIRIDON;
  if (id == "73722" || id == "70241" || id == "70242")
    return StationId::SANTA_CLARA;
  if (id == "73827")
    return StationId::VASCO_RD;

  if (id == "900101" || id == "900102" || id == "900103")
    return StationId::ST_12TH_ST_OAKLAND_CITY_CENTER;
  if (id == "901501" || id == "901502")
    return StationId::ST_16TH_ST_MISSION;
  if (id == "900201" || id == "900202" || id == "900203")
    return StationId::ST_19TH_ST_OAKLAND;
  if (id == "901601" || id == "901602")
    return StationId::ST_24TH_ST_MISSION;
  if (id == "908301" || id == "908302")
    return StationId::ANTIOCH;
  if (id == "904101" || id == "904102")
    return StationId::ASHBY;
  if (id == "901801" || id == "901802")
    return StationId::BALBOA_PARK;
  if (id == "902501" || id == "902502")
    return StationId::BAY_FAIR;
  if (id == "909501" || id == "909502")
    return StationId::BERRYESSA_NORTH_SAN_JOSE;
  if (id == "905101" || id == "905102")
    return StationId::CASTRO_VALLEY;
  if (id == "901401" || id == "901402")
    return StationId::CIVIC_CENTER_UN_PLAZA;
  if (id == "902301" || id == "902302")
    return StationId::COLISEUM;
  if (id == "906101" || id == "906102")
    return StationId::COLMA;
  if (id == "903601" || id == "903602")
    return StationId::CONCORD;
  if (id == "901901" || id == "901902" || id == "901903")
    return StationId::DALY_CITY;
  if (id == "904201" || id == "904202")
    return StationId::DOWNTOWN_BERKELEY;
  if (id == "905301" || id == "905302")
    return StationId::DUBLIN_PLEASANTON;
  if (id == "904501" || id == "904502")
    return StationId::EL_CERRITO_DEL_NORTE;
  if (id == "904401" || id == "904402")
    return StationId::EL_CERRITO_PLAZA;
  if (id == "901161" || id == "901162")
    return StationId::EMBARCADERO;
  if (id == "902201" || id == "902202")
    return StationId::FRUITVALE;
  if (id == "901701" || id == "901702")
    return StationId::GLEN_PARK;
  if (id == "902601" || id == "902602")
    return StationId::HAYWARD;
  if (id == "903301" || id == "903302")
    return StationId::LAFAYETTE;
  if (id == "902101" || id == "902102")
    return StationId::LAKE_MERRITT;
  if (id == "900301" || id == "900302" || id == "900303" || id == "900304")
    return StationId::MACARTHUR;
  if (id == "906403")
    return StationId::MILLBRAE;
  if (id == "909401" || id == "909402")
    return StationId::MILPITAS;
  if (id == "901201" || id == "901202")
    return StationId::MONTGOMERY_ST;
  if (id == "904301" || id == "904302")
    return StationId::NORTH_BERKELEY;
  if (id == "903701" || id == "903702")
    return StationId::NORTH_CONCORD_MARTINEZ;
  if (id == "903201" || id == "903202")
    return StationId::ORINDA;
  if (id == "903801" || id == "903802")
    return StationId::PITTSBURG_BAY_POINT;
  if (id == "908201" || id == "908202")
    return StationId::PITTSBURG_CENTER;
  if (id == "903501" || id == "903502")
    return StationId::PLEASANT_HILL_CONTRA_COSTA_CENTRE;
  if (id == "901301" || id == "901302")
    return StationId::POWELL_ST;
  if (id == "904601" || id == "904602")
    return StationId::RICHMOND;
  if (id == "903101" || id == "903102")
    return StationId::ROCKRIDGE;
  if (id == "906301" || id == "906302")
    return StationId::SAN_BRUNO;
  if (id == "907101" || id == "907102" || id == "907103")
    return StationId::SAN_FRANCISCO_INTERNATIONAL_AIRPORT;
  if (id == "902401" || id == "902402")
    return StationId::SAN_LEANDRO;
  if (id == "902701" || id == "902702")
    return StationId::SOUTH_HAYWARD;
  if (id == "906201" || id == "906202" || id == "70041" || id == "70042")
    return StationId::SOUTH_SAN_FRANCISCO;
  if (id == "902801" || id == "902802")
    return StationId::UNION_CITY;
  if (id == "903401" || id == "903402")
    return StationId::WALNUT_CREEK;
  if (id == "909201" || id == "909202")
    return StationId::WARM_SPRINGS_SOUTH_FREMONT;
  if (id == "905201" || id == "905202")
    return StationId::WEST_DUBLIN_PLEASANTON;
  if (id == "901101" || id == "901102")
    return StationId::WEST_OAKLAND;

  if (id == "70021" || id == "70022")
    return StationId::ST_22ND_STREET;
  if (id == "70031" || id == "70032")
    return StationId::BAYSHORE;
  if (id == "70121" || id == "70122")
    return StationId::BELMONT;
  if (id == "70251" || id == "70252")
    return StationId::COLLEGE_PARK;
  if (id == "70071" || id == "70072")
    return StationId::BROADWAY;
  if (id == "70081" || id == "70082")
    return StationId::BURLINGAME;
  if (id == "70191" || id == "70192")
    return StationId::CALIFORNIA_AVE;
  if (id == "70101" || id == "70102")
    return StationId::HAYWARD_PARK;
  if (id == "70111" || id == "70112")
    return StationId::HILLSDALE;
  if (id == "70231" || id == "70232")
    return StationId::LAWRENCE;
  if (id == "70161" || id == "70162")
    return StationId::MENLO_PARK;
  if (id == "70061" || id == "70062")
    return StationId::MILLBRAE;
  if (id == "70211" || id == "70212")
    return StationId::MOUNTAIN_VIEW;
  if (id == "70171" || id == "70172")
    return StationId::PALO_ALTO;
  if (id == "70141" || id == "70142")
    return StationId::REDWOOD_CITY;
  if (id == "70201" || id == "70202")
    return StationId::SAN_ANTONIO;
  if (id == "70051" || id == "70052")
    return StationId::SAN_BRUNO;
  if (id == "70131" || id == "70132")
    return StationId::SAN_CARLOS;
  if (id == "70011" || id == "70012")
    return StationId::SAN_FRANCISCO;
  if (id == "70091" || id == "70092")
    return StationId::SAN_MATEO;
  if (id == "70221" || id == "70222")
    return StationId::SUNNYVALE;
  if (id == "70271" || id == "70272")
    return StationId::TAMIEN;

  return StationId::NUM_STATIONS;
}

const uint8_t stationIndexMap[NUM_LINES][NUM_STATIONS] = {
    // RED
    {
        255, 255, 255, 255, 255, 255, 8, 20, 7, 255, 21, 255, 5, 23, 255, 255,
        255, 255, 255, 255, 255, 255, 19, 255, 255, 25, 255, 24, 4, 255, 1, 2,
        16, 255, 22, 255, 255, 255, 255, 255, 255, 6, 255, 29, 255, 17, 255, 3,
        255, 255, 255, 255, 255, 255, 18, 255, 0, 255, 255, 27, 255, 255, 28, 255,
        255, 255, 255, 26, 255, 255, 255, 255, 255, 255, 255, 9},
    // ORANGE
    {
        255, 255, 255, 8, 255, 255, 18, 255, 19, 255, 255, 255, 21, 255, 12, 255,
        255, 0, 255, 255, 255, 255, 255, 14, 255, 255, 255, 255, 22, 255, 25, 24,
        255, 15, 255, 11, 255, 255, 255, 16, 255, 20, 255, 255, 2, 255, 255, 23,
        255, 255, 255, 255, 255, 255, 255, 255, 26, 255, 255, 255, 255, 255, 255, 255,
        13, 255, 10, 255, 255, 255, 255, 9, 255, 4, 255, 255},
    // YELLOW
    {
        255, 255, 255, 255, 255, 255, 13, 25, 12, 255, 26, 0, 255, 28, 255, 255,
        255, 255, 255, 255, 255, 255, 24, 255, 255, 30, 5, 29, 255, 255, 255, 255,
        21, 255, 27, 255, 255, 255, 8, 255, 255, 11, 255, 255, 255, 22, 255, 255,
        4, 9, 255, 2, 1, 6, 23, 255, 255, 10, 255, 32, 255, 255, 33, 255,
        255, 255, 255, 31, 255, 255, 255, 255, 7, 255, 255, 14},
    // GREEN
    {
        255, 255, 255, 8, 255, 255, 255, 29, 255, 255, 30, 255, 255, 32, 12, 255,
        255, 0, 255, 255, 255, 255, 28, 14, 255, 255, 255, 33, 255, 255, 255, 255,
        25, 15, 31, 11, 255, 255, 255, 16, 255, 255, 255, 255, 2, 26, 255, 255,
        255, 255, 255, 255, 255, 255, 27, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        13, 255, 10, 255, 255, 255, 255, 9, 255, 4, 255, 18},
    // BLUE
    {
        255, 255, 255, 255, 255, 255, 255, 23, 255, 255, 24, 255, 255, 26, 6, 255,
        255, 255, 255, 255, 255, 4, 22, 8, 255, 255, 255, 27, 255, 0, 255, 255,
        19, 9, 25, 255, 255, 255, 255, 10, 255, 255, 255, 255, 255, 20, 255, 255,
        255, 255, 255, 255, 255, 255, 21, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 2, 12},
    // CALTRAIN
    {
        255, 255, 255, 255, 255, 24, 255, 255, 255, 1, 255, 255, 255, 255, 255, 3,
        13, 255, 8, 9, 19, 255, 255, 255, 25, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 11, 12, 255, 255, 23, 255, 16, 7, 255, 255, 21, 255,
        255, 255, 17, 255, 255, 255, 255, 15, 255, 255, 20, 6, 14, 0, 255, 26,
        255, 10, 255, 5, 18, 22, 29, 255, 255, 255, 255, 255},
    // ACE
    {
        3, 5, 8, 15, 23, 24, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 26,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
};

struct StopRecord
{
  String trip_id;
  String line_id;
  StationId station;
  time_t arrival;
  time_t departure;
};

struct Trip
{
  String trip_id;
  String line_id;
  std::vector<StopRecord> stops;
};

const char *SUPABASE_FN = "https://icalcigcgkzaxyvhnfgc.supabase.co/functions/v1/getStatus";
const unsigned long FETCH_INTERVAL_MS = 5 * 60 * 1000UL;
unsigned long lastFetch = 0;
std::vector<Trip> trips;

bool fetchAndParse()
{
  Serial.println("→ fetchAndParse()");
  HTTPClient http;
  http.begin(SUPABASE_FN);
  int code = http.GET();
  Serial.printf("  HTTP GET returned %d\n", code);
  if (code != HTTP_CODE_OK)
  {
    http.end();
    return false;
  }

  String payload = http.getString();
  Serial.printf("  Payload length: %u chars\n", payload.length());
  Serial.println(payload.substring(0, min(payload.length(), 200u)));

  DynamicJsonDocument doc(16 * 1024);
  auto err = deserializeJson(doc, payload);
  if (err)
  {
    Serial.print("  JSON parse error: ");
    Serial.println(err.c_str());
    http.end();
    return false;
  }
  Serial.printf("  JSON parsed, array size=%u\n", doc.size());
  http.end();

  if (err)
  {
    Serial.print("JSON parse error: ");
    Serial.println(err.c_str());
    return false;
  }

  std::map<String, Trip> grouped;
  JsonArray arr = doc.as<JsonArray>();
  for (JsonVariant el : doc.as<JsonArray>())
  {
    const char *rawId = el["station_id"];
    Serial.printf("    record: trip=%s station_id=%s\n",
                  el["trip_id"].as<const char *>(),
                  rawId);
    StationId sid = stationIdFromExternalId(rawId);
    if (sid == NUM_STATIONS)
    {
      Serial.println("      ⚠️ unknown station_id!");
    }
    StopRecord r;
    r.trip_id = el["trip_id"].as<String>();
    r.line_id = el["line_id"].as<String>();
    r.station = stationIdFromExternalId(el["station_id"].as<const char *>());
    r.arrival = el["arrival_time"] ? parseISO(el["arrival_time"].as<const char *>()) : 0;
    r.departure = el["departure_time"] ? parseISO(el["departure_time"].as<const char *>()) : 0;

    auto &t = grouped[r.trip_id];
    t.trip_id = r.trip_id;
    t.line_id = r.line_id;
    t.stops.push_back(r);
  }

  trips.clear();
  for (auto &p : grouped)
  {
    Trip &t = p.second;
    std::sort(t.stops.begin(), t.stops.end(),
              [](const StopRecord &a, const StopRecord &b)
              {
                time_t ta = a.departure ? a.departure : a.arrival;
                time_t tb = b.departure ? b.departure : b.arrival;
                return ta < tb;
              });
    trips.push_back(std::move(t));
  }

  return true;
}

time_t parseISO(const char *s)
{
  struct tm tm = {};
  strptime(s, "%Y-%m-%dT%H:%M:%S", &tm);
  tm.tm_isdst = -1;
  return mktime(&tm);
}

Line lineFromString(const String &s)
{
  String u = s;
  u.toUpperCase();
  u.trim();

  int cut = u.indexOf('-');
  if (cut < 0)
    cut = u.indexOf(' ');
  if (cut > 0)
    u = u.substring(0, cut);

  if (u == "RED")
    return RED;
  if (u == "ORANGE")
    return ORANGE;
  if (u == "YELLOW")
    return YELLOW;
  if (u == "GREEN")
    return GREEN;
  if (u == "BLUE")
    return BLUE;
  if (u == "LOCAL" || u == "SOUTH" || u == "LIMITED" || u == "EXPRESS")
    return CALTRAIN;
  if (u == "ACETRAIN")
    return ACE;

  return RED;
}

CRGB colorForLine(Line L)
{
  switch (L)
  {
  case RED:
    return CRGB::Red;
  case ORANGE:
    return CRGB::Orange;
  case YELLOW:
    return CRGB::Yellow;
  case GREEN:
    return CRGB::Green;
  case BLUE:
    return CRGB::Blue;
  case CALTRAIN:
    return CRGB::Maroon;
  case ACE:
    return CRGB::Purple;
  default:
    return CRGB::White;
  }
}

String formatTime(time_t t)
{
  struct tm tm;
  localtime_r(&t, &tm);

  char buf[20];
  snprintf(buf, sizeof(buf),
           "%04d-%02d-%02d %02d:%02d:%02d",
           tm.tm_year + 1900,
           tm.tm_mon + 1,
           tm.tm_mday,
           tm.tm_hour,
           tm.tm_min,
           tm.tm_sec);
  return String(buf);
}

int computeTrainIndex(const Trip &trip, time_t now)
{
  Serial.print(F("Trip ID: "));
  Serial.println(trip.trip_id);
  Serial.print(F("Now:    "));
  Serial.println(formatTime(now));

  Line line = lineFromString(trip.line_id);
  int maxIndex = lineLens[line] - 1;
  Serial.print(F("Line length: "));
  Serial.println(lineLens[line]);

  struct Event
  {
    time_t t;
    uint8_t idx;
    bool isArrival;
    bool isDeparture;
  };
  std::vector<Event> evts;
  evts.reserve(trip.stops.size() * 2);

  for (size_t i = 0; i < trip.stops.size(); ++i)
  {
    const auto &s = trip.stops[i];
    uint8_t idx = getStationIndex(line, s.station);
    if (idx == 255)
      continue;

    if (s.arrival > 0)
      evts.push_back(Event{s.arrival, idx, true, false});
    if (s.departure > 0)
      evts.push_back(Event{s.departure, idx, false, true});
  }
  if (evts.empty())
  {
    Serial.println(F("→ no valid events; returning –1"));
    return -1;
  }

  std::sort(evts.begin(), evts.end(),
            [](const Event &a, const Event &b)
            {
              return a.t < b.t;
            });
  auto newEnd = std::unique(evts.begin(), evts.end(),
                            [](const Event &a, const Event &b)
                            {
                              return a.t == b.t && a.idx == b.idx && a.isArrival == b.isArrival && a.isDeparture == b.isDeparture;
                            });
  evts.erase(newEnd, evts.end());

  time_t firstDepT = 0;
  uint8_t firstDepIdx = 255;
  for (size_t i = 0; i < evts.size(); ++i)
  {
    if (evts[i].isDeparture)
    {
      firstDepT = evts[i].t;
      firstDepIdx = evts[i].idx;
      break;
    }
  }
  if (firstDepT > 0 && now < firstDepT)
  {
    Serial.print(F("Now before first departure ("));
    Serial.print(formatTime(firstDepT));
    Serial.print(F(") → clamp idx="));
    Serial.println(firstDepIdx);
    return firstDepIdx;
  }

  for (size_t i = 0; i + 1 < evts.size(); ++i)
  {
    const Event &A = evts[i], &B = evts[i + 1];
    if (now >= A.t && now <= B.t)
    {
      if (A.idx == B.idx && A.isArrival && B.isDeparture)
      {
        Serial.print(F("Dwell at idx="));
        Serial.println(A.idx);
        return A.idx;
      }
      if (A.idx != B.idx && A.isDeparture && B.isArrival)
      {
        double span = double(B.t - A.t);
        double frac = double(now - A.t) / span;
        int pos = A.idx + int(std::round(frac * (B.idx - A.idx)));
        pos = constrain(pos, 0, maxIndex);

        Serial.print(F("Travel "));
        Serial.print(A.idx);
        Serial.print(F("@"));
        Serial.print(formatTime(A.t));
        Serial.print(F(" → "));
        Serial.print(B.idx);
        Serial.print(F("@"));
        Serial.println(formatTime(B.t));
        Serial.print(F(" frac="));
        Serial.println(frac, 3);
        Serial.print(F("→ interp idx="));
        Serial.println(pos);
        return pos;
      }
      Serial.println(F("→ gap with no valid travel/dwell → –1"));
      return -1;
    }
  }

  const Event &last = evts.back();
  Serial.print(F("Now after last event → clamp idx="));
  Serial.println(last.idx);
  return last.idx;
}

void updateTrains()
{
  time_t now = time(nullptr);

  for (int L = 0; L < NUM_LINES; ++L)
    for (int i = 0; i < lineLens[L]; ++i)
      lineLeds[L][i] = CRGB::Black;

  for (int L = 0; L < NUM_LINES; ++L)
  {
    auto idxs = getLineIndices((Line)L);
    for (auto idx : idxs)
      lineLeds[L][idx] = CRGB(50, 50, 50);
  }

  for (auto &t : trips)
  {
    Serial.print(t.line_id);
    Line L = lineFromString(t.line_id);
    Serial.println(L);

    int idx = computeTrainIndex(t, now);
    if (idx >= 0 && idx < lineLens[L])
    {
      lineLeds[L][idx] = colorForLine(L);
    }
  }

  FastLED.show();
}

unsigned long lastMillis = 0;
const unsigned long interval = 1000;

CRGB redLine[RED_LEN];
CRGB orangeLine[ORANGE_LEN];
CRGB yellowLine[YELLOW_LEN];
CRGB blueLine[BLUE_LEN];
CRGB greenLine[GREEN_LEN];
CRGB calTrain[CAL_LEN];
CRGB ace[ACE_LEN];
CRGB legend[LEGEND_LEN];

CRGB *lineLeds[NUM_LINES] = {
    redLine, orangeLine, yellowLine,
    greenLine, blueLine, calTrain, ace};

const uint8_t lineLens[NUM_LINES] = {
    RED_LEN, ORANGE_LEN, YELLOW_LEN,
    GREEN_LEN, BLUE_LEN, CAL_LEN, ACE_LEN};

void multiWipe(CRGB *leds[], uint8_t lens[], const CRGB colors[], uint8_t count, uint8_t segmentLen, uint16_t delayMs)
{
  uint8_t maxLen = 0;
  for (uint8_t s = 0; s < count; ++s)
    if (lens[s] > maxLen)
      maxLen = lens[s];

  for (int head = -segmentLen; head < maxLen; ++head)
  {
    for (uint8_t s = 0; s < count; ++s)
      for (uint8_t i = 0; i < lens[s]; ++i)
        leds[s][i] = CRGB::Black;
    for (uint8_t s = 0; s < count; ++s)
      for (uint8_t k = 0; k < segmentLen; ++k)
      {
        int idx = head + k;
        if (idx >= 0 && idx < lens[s])
          leds[s][idx] = colors[s];
      }
    FastLED.show();
    delay(delayMs);
  }
}

void maxSend(uint8_t reg, uint8_t data)
{
  SPI.beginTransaction(SPISettings(SPI_FREQ, MSBFIRST, SPI_MODE0));
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(reg);
  SPI.transfer(data);
  digitalWrite(CS_PIN, HIGH);
  SPI.endTransaction();
}

void showDashes()
{
  for (uint8_t r = 1; r <= 4; ++r)
    maxSend(r, 0x0A);
}

void displayNumber(uint16_t v, bool dot2nd)
{
  uint8_t d0 = v % 10;
  uint8_t d1 = (v / 10) % 10;
  uint8_t d2 = (v / 100) % 10;
  uint8_t d3 = (v / 1000) % 10;
  uint8_t arr[4] = {d0, d1, d2, d3};
  for (uint8_t reg = 1; reg <= 4; ++reg)
  {
    uint8_t x = arr[4 - reg];
    if (dot2nd && reg == 2)
      x |= 0x80;
    maxSend(reg, x);
  }
}

uint8_t getStationIndex(Line line, StationId st)
{
  return (st < NUM_STATIONS) ? stationIndexMap[line][st] : 255;
}

void setStationWhite(Line line, StationId st)
{
  uint8_t idx = getStationIndex(line, st);
  if (idx < lineLens[line])
  {
    lineLeds[line][idx] = CRGB::White;
    FastLED.show();
  }
}

void whiteOutAllLines()
{
  for (uint8_t line = 0; line < NUM_LINES; ++line)
  {
    for (uint8_t st = 0; st < NUM_STATIONS; ++st)
    {
      uint8_t idx = stationIndexMap[line][st];
      if (idx != 255 && idx < lineLens[line])
      {
        lineLeds[line][idx] = CRGB::White;
        fadeToBlackBy(&lineLeds[line][idx], 1, 200);
      }
    }
  }
}

void setLineWhite(Line line)
{
  for (uint8_t i = 0; i < lineLens[line]; ++i)
    lineLeds[line][i] = CRGB::White;
  FastLED.show();
}

std::vector<StationId> getLineStations(Line line)
{
  std::vector<StationId> out;
  for (uint8_t s = 0; s < NUM_STATIONS; ++s)
    if (stationIndexMap[line][s] < lineLens[line])
      out.push_back((StationId)s);
  return out;
}

std::vector<uint8_t> getLineIndices(Line line)
{
  std::vector<uint8_t> out;
  for (uint8_t s = 0; s < NUM_STATIONS; ++s)
  {
    uint8_t idx = stationIndexMap[line][s];
    if (idx < lineLens[line])
      out.push_back(idx);
  }
  return out;
}

void setup()
{
  Serial.begin(115200);
  delay(100);

  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);
  SPI.begin(CLK_PIN, -1, DATA_PIN, CS_PIN);

  maxSend(0x09, 0xFF);
  maxSend(0x0A, 0x0F);
  maxSend(0x0B, 0x03);
  maxSend(0x0C, 0x01);
  maxSend(0x0F, 0x00);

  showDashes();

  FastLED.addLeds<WS2812B, RED_PIN, GRB>(redLine, RED_LEN);
  FastLED.addLeds<WS2812B, ORANGE_PIN, GRB>(orangeLine, ORANGE_LEN);
  FastLED.addLeds<WS2812B, YELLOW_PIN, GRB>(yellowLine, YELLOW_LEN);
  FastLED.addLeds<WS2812B, BLUE_PIN, GRB>(blueLine, BLUE_LEN);
  FastLED.addLeds<WS2812B, GREEN_PIN, GRB>(greenLine, GREEN_LEN);
  FastLED.addLeds<WS2812B, CAL_PIN, GRB>(calTrain, CAL_LEN);
  FastLED.addLeds<WS2812B, ACE_PIN, GRB>(ace, ACE_LEN);
  FastLED.addLeds<WS2812B, LEGEND_PIN, GRB>(legend, LEGEND_LEN);

  FastLED.clear(true);
  FastLED.setBrightness(uint8_t(MAX_BRIGHTNESS * 255));

  legend[0] = CRGB::Red;
  legend[1] = CRGB::Orange;
  legend[2] = CRGB::Yellow;
  legend[3] = CRGB::Blue;
  legend[4] = CRGB::Green;
  legend[5] = CRGB::Maroon;
  legend[6] = CRGB::Purple;
  FastLED.show();

  {
    CRGB *strips[] = {redLine, orangeLine, yellowLine, blueLine, greenLine, calTrain, ace};
    uint8_t lens[] = {RED_LEN, ORANGE_LEN, YELLOW_LEN, BLUE_LEN, GREEN_LEN, CAL_LEN, ACE_LEN};
    CRGB colors[] = {CRGB::Red, CRGB::Orange, CRGB::Yellow, CRGB::Blue, CRGB::Green, CRGB::Maroon, CRGB::Purple};
    const uint8_t WIPE = 3;
    const uint16_t SPD = 100;
    multiWipe(strips, lens, colors, 7, WIPE, SPD);
  }

  WiFi.begin(SSID, PASSWORD);
  Serial.print("Wi-Fi connecting…");
  unsigned long t0 = millis();
  while (WiFi.status() != WL_CONNECTED)
  {
    if (millis() - t0 > 10000)
    {
      Serial.println("\nWi-Fi still not connected after 10s!");
      break;
    }
    showDashes();
    delay(500);
    Serial.print('.');
  }
  if (WiFi.status() == WL_CONNECTED)
  {
    Serial.println("\nWi-Fi connected! IP=" + WiFi.localIP().toString());
  }

  lastFetch = millis() - FETCH_INTERVAL_MS;

  configTzTime(
      "PST8PDT,M3.2.0/2,M11.1.0/2",
      "pool.ntp.org", "time.nist.gov");

  Serial.println("SNTP configured, waiting for time sync…");
}

void loop()
{
  unsigned long now = millis();

  if (now - lastMillis >= interval)
  {
    lastMillis += interval;

    struct tm tm;
    if (getLocalTime(&tm))
    {
      uint16_t hhmm = tm.tm_hour * 100 + tm.tm_min;
      bool dotOn = (tm.tm_sec % 2) == 0;
      displayNumber(hhmm, dotOn);
    }
  }

  if (now - lastFetch >= FETCH_INTERVAL_MS)
  {
    lastFetch = now;
    if (!fetchAndParse())
    {
      Serial.println("Failed to update train data");
    }
    else
    {
      Serial.println("Train data updated");
    }
  }

  static unsigned long lastDraw = 0;
  if (now - lastDraw >= 1000)
  {
    lastDraw = now;
    updateTrains();
  }
}